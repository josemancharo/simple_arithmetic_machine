Float = @{ ASCII_DIGIT+  ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ASCII_DIGIT+)? }
Integer = _{ ASCII_DIGIT+ }


Operation = _{ Add | Subtract | Power | Or | And | RightShift | LeftShift | Xor | Multiply | Divide | Modulus | Neq | Gte | Eq | Lte | Gt | Lt | Pipe }
    Add      = { "+" }
    Subtract = { "-" }
    Multiply = { "*" }
    Divide   = { "/" }
    Power    = { "**" }
    Modulus  = { "%" }
    Or       = { "|" }
    And      = { "&" }
    Xor      = { "^" }
    Gt       = { ">" }
    Lt       = { "<" }
    Gte      = { ">=" }
    Lte      = { "<=" }
    Eq       = { "==" }
    Neq      = { "<>" }
    Pipe     = { "|>" }
    RightShift = { ">>" }
    LeftShift = { "<<" }

UnaryOperation = _{ Neg | Not }
    Neg = { "-" }
    Not = { "!" }

FunctionInvocation = { FunctionName ~ "(" ~ Arguments ~ ")" }
Arguments = _{ Expression ~ ( "," ~ Expression )* }

FunctionName = { Identifier }

Expression = { Term ~ (Operation ~ Term)* }
Term = _{ UnaryOperation? ~ (Float | FunctionInvocation | Variable | "(" ~ Expression ~ ")") }

Variable = { Identifier }

Identifier = _{ ASCII_ALPHA+ ~ (ASCII_DIGIT | ASCII_ALPHA)* }
Calculation = _{ SOI ~ Statement ~ EOI }

WHITESPACE = _{ " " | "\t" }

Statement = _{ FunctionDeclaration | Assignment | Expression }
Assignment = { Variable ~ "=" ~ Expression }
FunctionDeclaration = { FunctionName ~ "(" ~ Parameters ~ ")" ~ "=" ~ Expression }
Parameters = { Variable ~ ( "," ~ Variable )* }