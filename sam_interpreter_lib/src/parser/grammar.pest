Float = @{ ASCII_DIGIT+  ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ ASCII_DIGIT+)? }
Integer = @{ ASCII_DIGIT+ ~ (^"e" ~ (ASCII_DIGIT | "_")+)? }
Hexadecimal = @{ "0x" ~  HexDigit+ ~ (HexDigit | "_")* }
HexDigit = _{ASCII_DIGIT | 'A'..'F' | 'a'..'f'}
Octal = @{ "0o" ~ OctalDigit+ ~ (OctalDigit | "_")* }
OctalDigit = _{"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"}
Binary = @{ "0b" ~ ("0" | "1")+ ~ ("0" | "1" | "_")* }

Number = _{ Binary | Hexadecimal | Octal | Float | Integer }

Operation = _{ 
    Add 
    | Ratio
    | Subtract 
    | Power 
    | BoolOr 
    | BoolAnd 
    | Or | And | RightShift | LeftShift | Xor 
    | Multiply | Divide | Modulus 
    | Neq | Gte | Eq | Lte | Gt | Lt 
    | Pipe 
    }
    
    Add      = { "+" }
    Subtract = { "-" }
    Multiply = { "*" }
    Divide   = { "/" }
    Ratio    = { "\\" }
    Power    = { "**" }
    Modulus  = { "%" }
    Or       = { "|" }
    BoolOr   = { "||" }
    BoolAnd  = { "&&" }
    And      = { "&" }
    Xor      = { "^" }
    Gt       = { ">" }
    Lt       = { "<" }
    Gte      = { ">=" }
    Lte      = { "<=" }
    Eq       = { "==" }
    Neq      = { "<>" }
    Pipe     = { "|>" }
    RightShift = { ">>" }
    LeftShift = { "<<" }

UnaryOperation = _{ Neg | BitCompliment | Not }
    Neg = { "-" }
    BitCompliment = { "~" }
    Not = { "!" }

TernaryOperation = _{ ConditionalOperator }
    ConditionalOperator = { "?" ~ Expression ~ ":" ~ Expression }

FunctionInvocation = { FunctionName ~ "(" ~ Arguments ~ ")" }
Arguments = _{ Expression ~ ("," ~ Expression )* }

FunctionName = { Identifier }

Expression = { Term ~ ((Operation ~ Term) | TernaryOperation)* }
Term = _{ UnaryOperation? ~ (ValidTermItem | "(" ~ Expression ~ ")") }

ValidTermItem = _{  Number | FunctionInvocation | Variable | PeekStack }

Variable = { Identifier }
PeekStack = { "$" }

Identifier = _{ ("_" | ASCII_ALPHA)+ ~ (ASCII_DIGIT | ASCII_ALPHA | "_")* }
Calculation = _{ SOI ~ Statement ~ (NEWLINE | EOI) }
File = _{ Calculation* }

WHITESPACE = _{ " " | "\t" | NEWLINE }

Statement = _{ FunctionDeclaration | Assignment | Expression }
Assignment = { Variable ~ "=" ~ Expression }
FunctionDeclaration = { FunctionName ~ "(" ~ Parameters ~ ")" ~ "=" ~ Expression }
Parameters = { Variable ~ ( "," ~ Variable )* }

// Linear Algebra
MatrixDefinition = { "[" ~ (Expression ~ ((Semicolon | Comma) ~ Expression)*)? ~ (Semicolon | Comma)? ~"]" }
Semicolon = _{ ";" }
Comma = _{ "," }